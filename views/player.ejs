<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>player</title>
    <style>
        .payment-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .payment-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: transparent;
            padding: 20px;
            border-radius: 10px;
            max-width: 500px;
            width: 90%;
        }

        body {
            background: linear-gradient(135deg, #1db954 0%, #191414 100%);
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
            color: #fff;
            margin: 0;
            height: 100vh;
            /* overflow: hidden; */
        }

        h1 {
            font-size: 2rem;
            font-weight: 700;
            margin-top: 40px;
            text-align: center;
            letter-spacing: 1px;
        }

        #spotifyPlayer {
            background: rgba(25, 20, 20, 0.85);
            border-radius: 20px;
            max-width: 500px;
            margin: 40px auto 20px auto;
            padding: 30px 40px;
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        button {
            background: #1db954;
            color: #fff;
            border: none;
            border-radius: 50px;
            padding: 12px 32px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
            margin: 10px auto;
            display: block;
        }

        button:hover {
            background: #1ed760;
        }

        p {
            text-align: center;
            font-size: 1.1rem;
            margin-bottom: 0;
        }

        #hide-payment {
            background: #1db954;
            border: none;
            color: #fff;
            font-size: 1.5rem;
            cursor: pointer;
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            transition: background 0.2s;
        }

        #hide-payment:hover {
            background: #1ed760;
        }

        .main-content {
            transition: filter 0s ease;
        }

        .main-content.blurred {
            filter: blur(5px);
        }

        #album-cover {
            width: 64px;
            height: 64px;
            border-radius: 8px;
            vertical-align: middle;
            margin-right: 10px;
        }
    </style>
</head>

<body>
    <div class="main-content">
        <h1>Spotify Player</h1>
        <p>User: <%= user %>
        </p>
        <div id="spotifyPlayer">
            <input type="text" id="searchInput" placeholder="Search for a song, artist, or album" />
            <button id="searchButton" onclick="searchSpotify()">Search</button>
            <div id="searchResults"></div>
        </div>
    </div>
    <div id="paymentModal" class="payment-modal">
        <div class="payment-content">
            <button onclick="hidePayment()" id="hide-payment">&times;</button>
            <%- include('partials/pay') %>
        </div>
    </div>
</body>
<script>
    // Global payment status flag
    let hasPaid = <%= JSON.stringify(hasPaid || false) %>;
    // Global playback status flag
    let isPlaying = false;

    async function checkPaymentAndPlay(uri) {
        console.log('checkPaymentAndPlay called - hasPaid value:', hasPaid);
        if (!hasPaid) {
            showPayment();
            return;
        }

        // claim payment on the server so it resets next time
        try {
            const res = await fetch('/claim-payment', { method: 'POST' });
            const data = await res.json();
            if (!data.ok) {
                showPayment();
                return;
            }
        } catch (e) {
            console.error('Failed to claim payment', e);
            showPayment();
            return;
        }


    }


    async function searchSpotify() {
        const query = document.getElementById('searchInput').value;
        if (!query) return;

        try {
            const response = await fetch('/search', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query })
            });
            const data = await response.json();
            const resultsDiv = document.getElementById('searchResults');
            resultsDiv.innerHTML = '';

            if (data.tracks && data.tracks.items.length > 0) {
                data.tracks.items.forEach(track => {
                    const trackDiv = document.createElement('div');
                    trackDiv.style.marginBottom = '10px';
                    trackDiv.innerHTML = `
                        <img src="${track.album.image}" alt="${track.album.name}" id="album-cover" />
                        <strong>${track.name}</strong> by ${track.artist}
                        <button onclick="playTrack('${track.uri}')">Play</button>
                    `;
                    resultsDiv.appendChild(trackDiv);
                });
            } else {
                resultsDiv.innerHTML = '<p>No results found.</p>';
            }
        } catch (error) {
            console.error('Error searching Spotify:', error);
        }
    }
    function playTrack(uri) {
        if (hasPaid) {
            // if there is a song playing it adds the new song to the queue
            if (isPlaying) {
                fetch('/addToQueue', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ uri })
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Track added to queue on your Spotify device!');
                        } else {
                            return response.json().then(data => {
                                if (data.error == 'Payment required') {
                                    showPayment();
                                } else {
                                    alert('Failed to add track to queue: ' + (data.error || 'Unknown error'));
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error adding track to queue:', error);
                        alert('Failed to add track to queue: Network error');
                    });
                return;
            } else {
                console.log('Playing track:', uri);
                fetch('/play', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ uri })
                })
                    .then(response => {
                        if (response.ok) {
                            isPlaying = true; // Set playing state
                            hasPaid = false; // Reset payment after playing
                            alert('Playing track on your Spotify device!');
                        } else {
                            return response.json().then(data => {
                                if (data.error == 'Payment required') {
                                    showPayment();
                                } else {
                                    alert('Failed to play track: ' + (data.error || 'Unknown error'));
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error playing track:', error);
                        alert('Failed to play track: Network error');
                    });
            }
        } else if (!hasPaid) {
            showPayment();
        }
    }

    async function checkIfPlaying() {
        const response = await fetch('/playback-status');
        const data = await response.json();
        return data.isPlaying;
    }
    setInterval(async () => {
        isPlaying = await checkIfPlaying();
        console.log('Playback status updated:', isPlaying);
    }, 5000); // Check every 5 seconds
    function showPayment() {
        document.getElementById('paymentModal').style.display = 'block';
        document.querySelector('.main-content').classList.add('blurred');
    }

    function hidePayment() {
        document.getElementById('paymentModal').style.display = 'none';
        document.querySelector('.main-content').classList.remove('blurred');
    }
</script>

</html>