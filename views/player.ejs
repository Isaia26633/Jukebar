<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jukebar</title>
    <style>
        .payment-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .payment-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: transparent;
            padding: 20px;
            border-radius: 10px;
            max-width: 500px;
            width: 90%;
        }

        body {
            background: linear-gradient(135deg, #1db954 0%, #191414 100%);
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
            color: #fff;
            margin: 0;
            height: 100vh;
            /* overflow: hidden; */
        }

        h1 {
            font-size: 2rem;
            font-weight: 700;
            margin-top: 40px;
            text-align: center;
            letter-spacing: 1px;
        }

        .container {
            display: flex;
            max-width: 1400px;
            /* Increased from 1200px */
            margin: 40px auto;
            gap: 30px;
            /* Increased gap */
            padding: 0 20px;
            height: calc(100vh - 200px);
            /* Fixed height for the container */
        }

        #spotifyPlayer {
            background: rgba(25, 20, 20, 0.85);
            border-radius: 20px;
            flex: 1;
            padding: 30px 40px;
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
            display: flex;
            flex-direction: column;
            align-items: center;
            order: 1;
            height: 100%;
            /* Fixed height */
            overflow-y: auto;
            /* Allow scrolling for search results */
            box-sizing: border-box;
        }

        #queue {
            background: rgba(25, 20, 20, 0.85);
            border-radius: 20px;
            flex: 1;
            padding: 30px 40px;
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
            order: 2;
            text-align: center;
            align-items: center;
            height: 100%;
            /* Fixed height */
            overflow-y: auto;
            /* Allow scrolling for queue items */
            box-sizing: border-box;
        }

        #searchResults {
            width: 100%;
            margin-top: 20px;
            max-height: calc(100% - 120px);
            overflow-y: auto;
        }

        button {
            background: #1db954;
            color: #fff;
            border: none;
            border-radius: 50px;
            padding: 12px 32px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
            margin: 10px auto;
            display: block;
        }

        button:hover {
            background: #1ed760;
        }

        p {
            text-align: center;
            font-size: 1.1rem;
            margin-bottom: 0;
        }

        #hide-payment {
            background: #1db954;
            border: none;
            color: #fff;
            font-size: 1.5rem;
            cursor: pointer;
            position: absolute;
            top: 10px;
            right: 10px;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            transition: background 0.2s;
        }

        #hide-payment:hover {
            background: #1ed760;
        }

        .main-content {
            transition: filter 0s ease;
        }

        .main-content.blurred {
            filter: blur(5px);
        }

        #album-cover {
            width: 64px;
            height: 64px;
            border-radius: 8px;
            vertical-align: middle;
            margin-right: 10px;
        }
    </style>
</head>

<body>
    <div class="main-content">
        <h1>Spotify Player</h1>
        <p>User: <%= user %>
        </p>
        <div class="container">
            <div id="spotifyPlayer">
                <input type="text" id="searchInput" placeholder="Search for a song, artist, or album" />
                <button id="searchButton" onclick="searchSpotify()">Search</button>
                <div id="searchResults"></div>
            </div>
            <div id="queue">
                <h2>Queue</h2>
            </div>
        </div>
    </div>
    <div id="paymentModal" class="payment-modal">
        <div class="payment-content">
            <button onclick="hidePayment()" id="hide-payment">&times;</button>
            <%- include('partials/pay') %>
        </div>
    </div>

</body>
<script>
    // Global payment status flag
    let hasPaid = <%= JSON.stringify(hasPaid || false) %>;
    let pendingTrackUri = null; // Store the track they want to play

    async function checkPaymentAndPlay(uri) {
        console.log('checkPaymentAndPlay called - hasPaid value:', hasPaid);

        if (!hasPaid) {
            pendingTrackUri = uri; // Store the track they want to play
            showPayment();
            return;
        }

        // Claim payment on the server
        try {
            const res = await fetch('/claimPayment', { method: 'POST' });
            const data = await res.json();
            if (!data.ok) {
                pendingTrackUri = uri; // Store the track they want to play
                showPayment();
                return;
            }
            // Reset payment after claiming
            hasPaid = false;
        } catch (e) {
            console.error('Failed to claim payment', e);
            pendingTrackUri = uri; // Store the track they want to play
            showPayment();
            return;
        }

        console.log('Payment verified, playing track:', uri);
        console.log('it working');
        addToQueue(uri);
    }

    function addToQueue(uri) {
        fetch('/addToQueue', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ uri })
        })
            .then(response => {
                if (response.ok) {
                    alert('Track added to queue!');
                } else {
                    return response.json().then(data => {
                        alert('Failed to add to queue: ' + (data.error || 'Unknown error'));
                    });
                }
            })
            .catch(error => {
                console.log('oopsies!')
                console.error('Error adding track to queue:', error);
                alert('Network error');
            });
    }

    async function searchSpotify() {
        const query = document.getElementById('searchInput').value;
        if (!query) return;

        try {
            const response = await fetch('/search', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query })
            });
            const data = await response.json();
            const resultsDiv = document.getElementById('searchResults');
            resultsDiv.innerHTML = '';

            if (data.tracks && data.tracks.items.length > 0) {
                data.tracks.items.forEach(track => {
                    const trackDiv = document.createElement('div');
                    trackDiv.style.marginBottom = '10px';
                    trackDiv.innerHTML = `
                        <img src="${track.album.image}" alt="${track.album.name}" id="album-cover" />
                        <strong>${track.name}</strong> by ${track.artist}
                        <button onclick="checkPaymentAndPlay('${track.uri}')">Play</button>
                    `;
                    resultsDiv.appendChild(trackDiv);
                });
            } else {
                resultsDiv.innerHTML = '<p>No results found.</p>';
            }
        } catch (error) {
            console.error('Error searching Spotify:', error);
        }
    }
    
    async function getQueue() {
        try {
            const response = await fetch('/getQueue', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(params)
            });
            const data = await response.json();
            if (data.ok) {
                console.log('Queue data:', data.queue);
            } else {
                console.error('Failed to get queue:', data.error);
            }
        } catch (error) {
            console.error('Error fetching queue:', error);
        }
    }

    function showPayment() {
        document.getElementById('paymentModal').style.display = 'block';
        document.querySelector('.main-content').classList.add('blurred');
    }

    function hidePayment() {
        document.getElementById('paymentModal').style.display = 'none';
        document.querySelector('.main-content').classList.remove('blurred');

        // If there's a pending track and user has paid, play it automatically
        if (pendingTrackUri && hasPaid) {
            const uri = pendingTrackUri;
            pendingTrackUri = null; // Clear the pending track
            checkPaymentAndPlay(uri); // This will now work since hasPaid is true
        }
    }

    // Function to be called when payment is successful (you'll need to call this from your payment partial)
    function onPaymentSuccess() {
        hasPaid = true;
        hidePayment(); // This will now automatically play the pending track
    }

    setInterval(getQueue, 7000); // Refresh queue every 7 seconds
</script>

</html>