<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jukebar</title>
    <link rel="icon" href="/img/favicon.png">
    <link rel="stylesheet" href="/styles.css">

</head>

<body onload="getQueue(); currentlyPlaying();">
    <div class="main-content">
        <h1>Spotify Player</h1>
        <p>User: <%= user %>
        </p>
        <div class="container">
            <div id="spotifyPlayer">
                <form id="searchForm" onsubmit="handleSearchSubmit(event)">
                    <div class="search-container">
                        <input type="text" id="searchInput" placeholder="Search for a song, artist, or album" required>
                        <button type="submit" id="searchButton">
                            <img src="/img/search.png" alt="Search" class="search-icon">
                        </button>
                    </div>
                </form>
                <div id="searchResults"></div>
            </div>
            <div id="songStats">
                <h2>Now Playing:</h2>
                <hr>
                <div id="currentlyPlaying">
                </div>
                <div>
                    <button onclick="checkPaymentAndSkip()" class="skip-button">Skip</button>
                </div>
                <h2>Up Next:</h2>
                <hr>
                <div id="queue">
                </div>
            </div>
        </div>
    </div>
    <div id="paymentModal" class="payment-modal">
        <div class="payment-content">
            <button onclick="hidePayment()" id="hide-payment">&times;</button>
            <%- include('partials/pay') %>
        </div>
    </div>

</body>
<script>
    // Global payment status flag
    let hasPaid = <%= JSON.stringify(hasPaid || false) %>;
    let currentID = <%= JSON.stringify(userID || null) %>;
    let pendingTrackUri = null;
    let pendingAction = null;

    function handleSearchSubmit(event) {
        event.preventDefault();
        searchSpotify();
    }

    async function checkPaymentAndPlay(uri) {
        console.log('checkPaymentAndPlay called - hasPaid value:', hasPaid);

        if (currentID === 37) {
            addToQueue(uri);
            return;
        }

        if (!hasPaid) {
            pendingTrackUri = uri;
            pendingAction = 'play';
            showPayment();
            return;
        }

        // Claim payment on the server
        try {
            const res = await fetch('/claimPayment', { method: 'POST' });
            const data = await res.json();
            if (!data.ok) {
                pendingTrackUri = uri;
                showPayment();
                return;
            }
            // Reset payment after claiming
            hasPaid = false;
        } catch (e) {
            console.error('Failed to claim payment', e);
            pendingTrackUri = uri;
            showPayment();
            return;
        }

        console.log('Payment verified, playing track:', uri);
        console.log('it working');
        addToQueue(uri);
    }

    async function checkPaymentAndSkip() {
        console.log('checkPaymentAndSkip called - hasPaid value:', hasPaid);
        currentlyPlayingUri = `spotify:track:${currentlyPlayingUri}`;
        if (currentID === 37) {
            skip(currentlyPlayingUri);
            return;
        }

        if (!hasPaid) {
            pendingTrackUri = currentlyPlayingUri;
            pendingAction = 'skip';
            showPayment();
            return;
        }

        // Claim payment on the server
        try {
            const res = await fetch('/claimPayment', { method: 'POST' });
            const data = await res.json();
            if (!data.ok) {
                pendingTrackUri;
                showPayment();
                return;
            }
            // Reset payment after claiming
            hasPaid = false;
        } catch (e) {
            console.error('Failed to claim payment', e);
            pendingTrackUri = currentlyPlayingUri;
            pendingAction = 'skip';
            showPayment();
            return;
        }

        console.log('Payment verified, skipping track:', currentlyPlayingUri);
        console.log('it working');
        skip(currentlyPlayingUri);
    }

    async function skip(uri) {
        try {
            const response = await fetch('/skip', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ uri })
            });
            if (!response.ok) {
                refund();
            }
        } catch (error) {
            console.error('Error skipping track:', error);
            alert('Network error');
        }
    }

    function addToQueue(uri) {
        fetch('/addToQueue', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ uri })
        })
            .then(response => {
                if (response.ok) {
                    alert('Track added to queue!');
                } else {
                    return response.json().then(data => {
                        refund();
                    });
                }
            })
            .catch(error => {
                console.log('oopsies!')
                console.error('Error adding track to queue:', error);
                alert('Network error');
            });
    }

    async function searchSpotify() {
        const query = document.getElementById('searchInput').value;
        if (!query) return;

        try {
            const response = await fetch('/search', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query })
            });
            const data = await response.json();
            const resultsDiv = document.getElementById('searchResults');
            resultsDiv.innerHTML = '';

            if (data.tracks && data.tracks.items.length > 0) {
                data.tracks.items.forEach(track => {
                    const trackDiv = document.createElement('div');
                    trackDiv.className = 'search-result-item';
                    trackDiv.innerHTML = `
                        <img src="${track.album.image}" alt="${track.album.name}" class="album-cover" />
                        <div class="search-result-content">
                            <div class="search-result-title">${track.name}</div>
                            <div class="search-result-artist">${track.artist}</div>
                        </div>
                        <button onclick="checkPaymentAndPlay('${track.uri}')" class="play-button">Play</button>
                    `;
                    resultsDiv.appendChild(trackDiv);
                });
            } else {
                resultsDiv.innerHTML = '<p>No results found.</p>';
            }
        } catch (error) {
            console.error('Error searching Spotify:', error);
        }
    }

    async function getQueue() {
        try {
            const response = await fetch('/getQueue', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            if (data.ok) {
                console.log('Queue data:', data.tracks.items);
                const queueDiv = document.getElementById('queue');
                queueDiv.innerHTML = '';
                if (data.tracks.items.length == 0) {
                    const queueDiv = document.getElementById('queue');
                    queueDiv.innerHTML = '<p>No tracks in queue.</p>';
                } else {
                    data.tracks.items.forEach((item, index) => {
                        const itemDiv = document.createElement('div');
                        itemDiv.className = 'queue-item';
                        itemDiv.innerHTML = `
                        <img src="${item.album.image}" alt="${item.album.name}" class="album-cover" />
                        <div class="queue-item-content">
                            <div class="queue-item-title">${item.name}</div>
                            <div class="queue-item-artist">${item.artist}</div>
                        </div>
                    `;
                        queueDiv.appendChild(itemDiv);
                    });
                }
            } else {
                console.error('Failed to get queue:', data.error);
            }
        } catch (error) {
            console.error('Error fetching queue:', error);
        }
    }

    async function currentlyPlaying() {
        try {
            const response = await fetch('/currentlyPlaying', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await response.json();
            if (data.ok) {
                console.log('Currently Playing:', data.tracks.items);
                const CurrentDiv = document.getElementById('currentlyPlaying');
                CurrentDiv.innerHTML = '';
                if (data.tracks.items.length == 0) {
                    const CurrentDiv = document.getElementById('currentlyPlaying');
                    CurrentDiv.innerHTML = '<p>No track is currently playing. Ask your teacher to start spotify</p>';
                    currentlyPlayingUri = null;
                }
                else {
                    data.tracks.items.forEach((item, index) => {
                        const itemDiv = document.createElement('div');
                        itemDiv.className = 'current-item';
                        itemDiv.innerHTML = `
                        <img src="${item.album.image}" alt="${item.album.name}" class="album-cover" />
                        <div class="current-item-content">
                            <div class="current-item-title">${item.name}</div>
                            <div class="current-item-artist">${item.artist}</div>
                        </div>
                    `;
                        CurrentDiv.appendChild(itemDiv);
                        currentlyPlayingUri = item.id
                    });
                }
            } else {
                console.error('Failed to get current track:', data.error);
            }
        } catch (error) {
            console.error('Error fetching current track:', error);
        }
    }

    function showPayment() {
        document.getElementById('paymentModal').style.display = 'block';
        document.querySelector('.main-content').classList.add('blurred');
    }

    function hidePayment() {
        document.getElementById('paymentModal').style.display = 'none';
        document.querySelector('.main-content').classList.remove('blurred');

        // Handle pending actions after payment
        if (hasPaid && pendingAction) {
            if (pendingAction === 'play' && pendingTrackUri) {
                const uri = pendingTrackUri;
                pendingTrackUri = null;
                pendingAction = null;
                checkPaymentAndPlay(uri);
            } else if (pendingAction === 'skip') {
                pendingAction = null;
                checkPaymentAndSkip();
            }
        }
    }

    function onPaymentSuccess() {
        hasPaid = true;
        hidePayment();
    }

    function refund() {
        fetch('/refund', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ reason: "Jukebar refund" })
        })
            .then(response => response.json())
            .then(data => {
                if (data.ok) {
                    alert('Spotify error occurred. Your digipogs have been refunded.');
                    console.log('Refund successful:', data);
                } else {
                    alert('Refund failed: ' + (data.error || 'Unknown error'));
                    console.error('Refund failed:', data.error);
                }
            })
            .catch(error => {
                alert('Network error during refund. Please contact support.');
                console.error('Error during refund:', error);
            });
    }

    setInterval(getQueue, 7000);
    setInterval(currentlyPlaying, 7000);

</script>

</html>