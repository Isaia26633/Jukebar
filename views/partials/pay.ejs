<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            background: #191414;
        }

        .card {
            background: #282828;
            max-width: 400px;
            margin: 40px auto;
            padding: 32px 24px 24px 24px;
            border-radius: 12px;
            box-shadow: 0 2px 16px rgba(29, 185, 84, 0.30);
        }

        h3 {
            font-size: 1.4em;
            font-weight: 600;
            color: rgb(29, 185, 84);
            margin-bottom: 24px;
        }

        .row {
            display: flex;
            flex-direction: column;
            margin-bottom: 18px;
        }

        label.small {
            font-size: 0.95em;
            color: #b3b3b3;
            margin-bottom: 6px;
        }

        input[type="number"],
        input[type="text"],
        input {
            width: 100%;
            padding: 8px 10px;
            font-size: 1em;
            border: 1px solid #535353;
            border-radius: 6px;
            background: #121212;
            color: #fff;
            transition: border-color 0.2s;
            outline: none;
            box-sizing: border-box;
        }

        input:focus {
            border-color: #1db954;
            background: #181818;
        }

        .actions {
            text-align: right;
            margin-top: 18px;
        }

        button.primary {
            background: #1db954;
            color: #fff;
            border: none;
            padding: 10px 22px;
            border-radius: 6px;
            font-size: 1em;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
        }

        button.primary:hover {
            background: #1ed760;
        }
    </style>
</head>

<body>
    <div class="card">
        <h3 style="margin-top:0">Transfer</h3>
        <div class="row"><label class="small">PIN</label>
            <div><input id="pin" type="password" pattern="\d*" inputmode="numeric" maxlength="6"
                    placeholder="Input your PIN" oninput="this.value = this.value.replace(/[^0-9]/g,'');" /></div>
        </div>
        <div class="row">
            <label class="small" style="margin-bottom:0; margin-right:10px;">Save your PIN for next purchase?</label>
            <input id="savePIN" type="checkbox" style="margin-left:0;" />
        </div>
        <div class="row">
            <label class="small">Please note: If you change your pin you will need to re-enter it for future
                transactions.</label>
        </div>
        <div class="actions"><button class="primary" onclick="
        if (confirm('This transfer will cost 50 Digipogs. Do you want to proceed?')) {
            doTransfer();
        }
    ">Send Transfer</button></div>
    </div>
</body>
<script>
    const pinInput = document.getElementById('pin');
    const savePIN = document.getElementById('savePIN');

    // Load saved PIN on page load
    async function loadSavedPin() {
        try {
            const savedPin = await getSavedPin();
            if (savedPin) {
                pinInput.value = savedPin;
                savePIN.checked = true; // Check the save PIN checkbox if we loaded a PIN
            }
        } catch (error) {
            console.error('Failed to load saved PIN:', error);
        }
    }

    async function getSavedPin() {
        try {
            const res = await fetch('/getPin', { method: 'POST' });
            const data = await res.json();
            if (!data.ok) {
                console.error('Failed to retrieve saved PIN', data.error);
                return '';
            }
            return data.userPin || '';
        } catch (error) {
            console.error('Error fetching saved PIN:', error);
            return '';
        }
    }

    // Load saved PIN when the page loads
    loadSavedPin();
    async function post(path, body) {
        const res = await fetch(path, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
        });
        const text = await res.text();
        try { return JSON.parse(text); } catch { return { raw: text }; }
    }
    async function doTransfer() {
        const pin = pinInput.value; // Get the current PIN value from input

        // Save PIN if checkbox is checked
        if (savePIN.checked) {
            try {
                await post('/savePin', { pin });
                console.log('PIN saved successfully');
            } catch (error) {
                console.error('Failed to save PIN:', error);
            }
        }

        const reason = 'Jukebar Payment';

        // Validate required fields
        if (!pin) {
            alert('Please fill in all required fields');
            return;
        }

        try {
            const result = await post('/transfer', { pin, reason });
            console.log('Transfer result:', result); // Debug log

            // Check for success in different possible formats
            const isSuccess = result.ok === true || result.success === true || result.status === 'success' ||
                (result.error === undefined && result.token !== undefined);

            if (isSuccess) {
                // Update the global flag directly (not window.parent since this is a partial)
                if (typeof hasPaid !== 'undefined') {
                    hasPaid = true;
                    console.log('Payment successful - hasPaid set to:', hasPaid);
                } else {
                    console.error('hasPaid variable not found in global scope');
                }
                hidePayment();
                alert('Transfer successful!');
                return;
            } else {
                // Get the error message in order of preference
                let errorMessage = result.error || result.message || 'Unknown error';
                
                console.log('Final error message:', errorMessage);
                alert('Transfer failed: ' + errorMessage);
                console.error('Transfer failed:', result);
            }
        } catch (error) {
            console.error('Transfer error:', error);
            alert('Transfer failed: Network error');
        }
    }
</script>

</html>