<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body onload="getPrice()">
    <div class="card">
        <h3 style="margin-top:0">Transfer</h3>
        <div class="row price-display">
            <div class="price-content">
                <span class="price-label">Purchase Cost:</span>
                <span class="price-amount" id="price">50 Digipogs</span>
            </div>
            <span class="discount-display" id="discount"></span>
        </div>
        <div class="row"><label class="small">PIN</label>
            <div><input id="pin" type="password" pattern="\d*" inputmode="numeric" maxlength="6"
                    placeholder="Input your PIN" oninput="this.value = this.value.replace(/[^0-9]/g,'');" /></div>
        </div>
        <div class="row">
            <label class="medium label-inline" for="savePIN">
                Save your PIN for next purchase?
                <input id="savePIN" type="checkbox" />
            </label>
        </div>
        <div class="row">
            <label class="small">Please note: If you change your pin you will need to re-enter it for future
                transactions.</label>
        </div>
        <div class="actions"><button class="primary" onclick="doTransfer();">Send Transfer</button></div>
    </div>
</body>
<script>
    const pinInput = document.getElementById('pin');
    const savePIN = document.getElementById('savePIN');

    // Load saved PIN on page load
    async function loadSavedPin() {
        try {
            const savedPin = await getSavedPin();
            if (savedPin) {
                pinInput.value = savedPin;
                savePIN.checked = true; // Check the save PIN checkbox if we loaded a PIN
            }
        } catch (error) {
            console.error('Failed to load saved PIN:', error);
        }
    }

    async function getSavedPin() {
        try {
            const res = await fetch('/getPin', { method: 'POST' });
            const data = await res.json();
            if (!data.ok) {
                console.error('Failed to retrieve saved PIN', data.error);
                return '';
            }
            return data.userPin || '';
        } catch (error) {
            console.error('Error fetching saved PIN:', error);
            return '';
        }
    }

    // Load saved PIN when the page loads
    loadSavedPin();
    async function post(path, body) {
        const res = await fetch(path, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
        });
        const text = await res.text();
        try { return JSON.parse(text); } catch { return { raw: text }; }
    }
    async function doTransfer() {
        const pin = pinInput.value; // Get the current PIN value from input

        // Save PIN if checkbox is checked
        if (savePIN.checked) {
            try {
                await post('/savePin', { pin });
                //console.log('PIN saved successfully');
            } catch (error) {
                console.error('Failed to save PIN:', error);
            }
        }

        let reason = 'Jukebar Payment';

        if (pendingAction === 'play') {
            reason += ' - Play Track';
        } else if (pendingAction === 'skip') {
            reason += ' - Skip Track';
        } else {
            console.error('Unknown pending action:', pendingAction);
            alert('Unknown action. Please try again. Your digipogs have not been charged.');
            return;
        }

        // Validate required fields
        if (!pin) {
            alert('Please enter your PIN.');
            return;
        }

        try {
            const result = await post('/transfer', { pin, reason });
            //console.log('Transfer result:', result); // Debug log

            // Check for success in different possible formats
            const isSuccess = result.ok === true || result.success === true || result.status === 'success' ||
                (result.error === undefined && result.token !== undefined);

            if (isSuccess) {
                // Update the global flag directly (not window.parent since this is a partial)
                if (typeof hasPaid !== 'undefined') {
                    hasPaid = true;
                    //console.log('Payment successful - hasPaid set to:', hasPaid);
                } else {
                    console.error('hasPaid variable not found in global scope');
                }
                hidePayment();
                return;
            } else {
                // Get the error message in order of preference
                let errorMessage = result.error || result.message || 'Unknown error';

                //console.log('Final error message:', errorMessage);
                alert('Transfer failed: ' + errorMessage);
                console.error('Transfer failed:', result);
            }
        } catch (error) {
            console.error('Transfer error:', error);
            alert('Transfer failed: Network error');
        }
    }

    async function getPrice() {
        try {
            const res = await fetch('/getAmount', { method: 'POST' });
            const data = await res.json();
            if (data.ok) {
                if (data.discountApplied) {
                    document.getElementById('price').innerText = `${data.amount} Digipogs`;
                    document.getElementsByClassName('row price-display')[0].style.border = '1px solid rgba(255, 215, 0, 0.5)';
                    document.getElementsByClassName('row price-display')[0].style.background = 'rgba(255, 215, 0, 0.15)';
                    document.getElementById('discount').innerText = 'Leaderboard discount applied!';
                } else {
                    document.getElementById('price').innerText = `${data.amount} Digipogs`;
                }
            } else {
                document.getElementById('price').innerText = 'Error loading price';
            }
        } catch (e) {
            document.getElementById('price').innerText = 'Error loading price';
        }
    }

</script>

</html>